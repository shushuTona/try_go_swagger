// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :execresult
INSERT INTO tasks (` + "`" + `status` + "`" + `, title, ` + "`" + `desc` + "`" + `) VALUES (?, ?, ?)
`

type CreateTaskParams struct {
	Status sql.NullString
	Title  sql.NullString
	Desc   sql.NullString
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTask, arg.Status, arg.Title, arg.Desc)
}

const getAllTaskList = `-- name: GetAllTaskList :many
SELECT taskid, status, title, ` + "`" + `desc` + "`" + `, created_date FROM tasks
`

func (q *Queries) GetAllTaskList(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTaskList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.Taskid,
			&i.Status,
			&i.Title,
			&i.Desc,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
