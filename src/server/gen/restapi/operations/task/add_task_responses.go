// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"try_go_swagger/gen/models"
)

// AddTaskOKCode is the HTTP code returned for type AddTaskOK
const AddTaskOKCode int = 200

/*
AddTaskOK Success input

swagger:response addTaskOK
*/
type AddTaskOK struct {
}

// NewAddTaskOK creates AddTaskOK with default headers values
func NewAddTaskOK() *AddTaskOK {

	return &AddTaskOK{}
}

// WriteResponse to the client
func (o *AddTaskOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// AddTaskBadRequestCode is the HTTP code returned for type AddTaskBadRequest
const AddTaskBadRequestCode int = 400

/*
AddTaskBadRequest Entity not found.

swagger:response addTaskBadRequest
*/
type AddTaskBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewAddTaskBadRequest creates AddTaskBadRequest with default headers values
func NewAddTaskBadRequest() *AddTaskBadRequest {

	return &AddTaskBadRequest{}
}

// WithPayload adds the payload to the add task bad request response
func (o *AddTaskBadRequest) WithPayload(payload *models.ErrorResponse) *AddTaskBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add task bad request response
func (o *AddTaskBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddTaskBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddTaskUnprocessableEntityCode is the HTTP code returned for type AddTaskUnprocessableEntity
const AddTaskUnprocessableEntityCode int = 422

/*
AddTaskUnprocessableEntity Entity not found.

swagger:response addTaskUnprocessableEntity
*/
type AddTaskUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewAddTaskUnprocessableEntity creates AddTaskUnprocessableEntity with default headers values
func NewAddTaskUnprocessableEntity() *AddTaskUnprocessableEntity {

	return &AddTaskUnprocessableEntity{}
}

// WithPayload adds the payload to the add task unprocessable entity response
func (o *AddTaskUnprocessableEntity) WithPayload(payload *models.ErrorResponse) *AddTaskUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add task unprocessable entity response
func (o *AddTaskUnprocessableEntity) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddTaskUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddTaskInternalServerErrorCode is the HTTP code returned for type AddTaskInternalServerError
const AddTaskInternalServerErrorCode int = 500

/*
AddTaskInternalServerError Entity not found.

swagger:response addTaskInternalServerError
*/
type AddTaskInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewAddTaskInternalServerError creates AddTaskInternalServerError with default headers values
func NewAddTaskInternalServerError() *AddTaskInternalServerError {

	return &AddTaskInternalServerError{}
}

// WithPayload adds the payload to the add task internal server error response
func (o *AddTaskInternalServerError) WithPayload(payload *models.ErrorResponse) *AddTaskInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add task internal server error response
func (o *AddTaskInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddTaskInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
