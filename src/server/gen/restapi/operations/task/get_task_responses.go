// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"try_go_swagger/gen/models"
)

// GetTaskOKCode is the HTTP code returned for type GetTaskOK
const GetTaskOKCode int = 200

/*
GetTaskOK success get task list

swagger:response getTaskOK
*/
type GetTaskOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Task `json:"body,omitempty"`
}

// NewGetTaskOK creates GetTaskOK with default headers values
func NewGetTaskOK() *GetTaskOK {

	return &GetTaskOK{}
}

// WithPayload adds the payload to the get task o k response
func (o *GetTaskOK) WithPayload(payload []*models.Task) *GetTaskOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get task o k response
func (o *GetTaskOK) SetPayload(payload []*models.Task) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTaskOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Task, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetTaskInternalServerErrorCode is the HTTP code returned for type GetTaskInternalServerError
const GetTaskInternalServerErrorCode int = 500

/*
GetTaskInternalServerError Entity not found.

swagger:response getTaskInternalServerError
*/
type GetTaskInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetTaskInternalServerError creates GetTaskInternalServerError with default headers values
func NewGetTaskInternalServerError() *GetTaskInternalServerError {

	return &GetTaskInternalServerError{}
}

// WithPayload adds the payload to the get task internal server error response
func (o *GetTaskInternalServerError) WithPayload(payload *models.ErrorResponse) *GetTaskInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get task internal server error response
func (o *GetTaskInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTaskInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
