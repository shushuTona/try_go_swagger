// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "description",
    "title": "try_go_swagger",
    "version": "1.0.0"
  },
  "host": "localhost",
  "basePath": "/api",
  "paths": {
    "/task": {
      "get": {
        "description": "Returns task list",
        "produces": [
          "application/json"
        ],
        "tags": [
          "task"
        ],
        "summary": "Get all task list",
        "operationId": "getTask",
        "responses": {
          "200": {
            "description": "success get task list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task"
              }
            }
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "task"
        ],
        "summary": "Add a new task to the store",
        "operationId": "addTask",
        "parameters": [
          {
            "description": "task object that needs to be added to the store",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success input"
          },
          "400": {
            "$ref": "#/responses/Error"
          },
          "422": {
            "$ref": "#/responses/Error"
          },
          "500": {
            "$ref": "#/responses/Error"
          }
        }
      }
    }
  },
  "definitions": {
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "status code",
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "message": {
          "description": "error message",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Task": {
      "type": "object",
      "properties": {
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "desc": {
          "type": "string"
        },
        "status": {
          "description": "task Status",
          "type": "string",
          "default": "Waiting",
          "enum": [
            "Waiting",
            "Processing",
            "Closed"
          ]
        },
        "taskId": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "title": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "TaskId": {
      "type": "integer",
      "format": "int64",
      "description": "number of items to skip",
      "name": "taskId",
      "in": "query",
      "required": true
    }
  },
  "responses": {
    "Error": {
      "description": "Entity not found.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  },
  "tags": [
    {
      "description": "Access to task",
      "name": "task"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "description",
    "title": "try_go_swagger",
    "version": "1.0.0"
  },
  "host": "localhost",
  "basePath": "/api",
  "paths": {
    "/task": {
      "get": {
        "description": "Returns task list",
        "produces": [
          "application/json"
        ],
        "tags": [
          "task"
        ],
        "summary": "Get all task list",
        "operationId": "getTask",
        "responses": {
          "200": {
            "description": "success get task list",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task"
              }
            }
          },
          "500": {
            "description": "Entity not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "task"
        ],
        "summary": "Add a new task to the store",
        "operationId": "addTask",
        "parameters": [
          {
            "description": "task object that needs to be added to the store",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success input"
          },
          "400": {
            "description": "Entity not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "Entity not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Entity not found.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "description": "status code",
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "message": {
          "description": "error message",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Task": {
      "type": "object",
      "properties": {
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "desc": {
          "type": "string"
        },
        "status": {
          "description": "task Status",
          "type": "string",
          "default": "Waiting",
          "enum": [
            "Waiting",
            "Processing",
            "Closed"
          ]
        },
        "taskId": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "title": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "TaskId": {
      "type": "integer",
      "format": "int64",
      "description": "number of items to skip",
      "name": "taskId",
      "in": "query",
      "required": true
    }
  },
  "responses": {
    "Error": {
      "description": "Entity not found.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  },
  "tags": [
    {
      "description": "Access to task",
      "name": "task"
    }
  ]
}`))
}
